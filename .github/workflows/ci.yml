name: CI (Bi-directional + Rich/MRDE)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scenario:
        description: "demo scenario (good | bad | rich | mrde)"
        required: true
        default: "good"

jobs:
  bdct:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - run: npm ci

      # ---- CONSUMER TESTS ----
      - name: Consumer tests (good)
        if: ${{ github.event_name == 'push' || inputs.scenario == 'good' }}
        run: npm run consumer:test:good

      - name: Consumer tests (bad)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.scenario == 'bad' }}
        run: npm run consumer:test:bad

      - name: Consumer tests (rich)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.scenario == 'rich' }}
        run: npm run consumer:test:rich

      - name: Consumer tests (MRDE showcase)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.scenario == 'mrde' }}
        run: npm run consumer:test:mrde

      # ---- PUBLISH CONSUMER PACT(S) ----
      - name: Publish consumer contract(s)
        run: npm run consumer:publish
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN:    ${{ secrets.PACT_BROKER_TOKEN }}
          # Branch/tag rules:
          # - bad => demo-bad
          # - mrde => mrde-demo
          # - otherwise => current ref
          BRANCH: ${{ inputs.scenario == 'bad' && 'demo-bad' || (inputs.scenario == 'mrde' && 'mrde-demo' || github.ref_name) }}
          CONSUMER_VERSION: ${{ github.sha }}

      # ---- PROVIDER (OpenAPI) ----
      # Always publish the GOOD provider contract so 'good' and 'rich' pass;
      # 'bad' shows incompatibility from the consumer side.
      - name: Generate provider OpenAPI (GOOD)
        if: ${{ github.event_name == 'push' || inputs.scenario != 'mrde' }}
        run: npm run openapi:gen:good

      - name: Publish provider contract (OpenAPI)
        if: ${{ github.event_name == 'push' || inputs.scenario != 'mrde' }}
        run: |
          npx --no-install pactflow publish-provider-contract openapi/provider.generated.yaml \
            --provider BDCT-JS-Provider \
            --provider-app-version "${GITHUB_SHA}" \
            --branch "${{ github.ref_name }}" \
            --content-type application/yaml \
            --broker-base-url "${PACT_BROKER_BASE_URL}" \
            --broker-token "${PACT_BROKER_TOKEN}"
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN:    ${{ secrets.PACT_BROKER_TOKEN }}

      # ---- CAN I DEPLOY ----
      # "good" & "rich" -> provider perspective should pass
      - name: can-i-deploy (provider perspective)
        if: ${{ github.event_name == 'push' || inputs.scenario == 'good' || inputs.scenario == 'rich' }}
        run: npm run can-i-deploy:provider
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN:    ${{ secrets.PACT_BROKER_TOKEN }}
          ENVIRONMENT:          test
          VERSION:              ${{ github.sha }}   # <-- add this

      # "bad" -> consumer perspective should fail (incompatibility demo)
      - name: can-i-deploy (consumer perspective)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.scenario == 'bad' }}
        run: npm run can-i-deploy:consumer
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN:    ${{ secrets.PACT_BROKER_TOKEN }}
          ENVIRONMENT:          test
          VERSION:              ${{ github.sha }}   # <-- add this too


      # MRDE: we skip can-i-deploy by default (separate pact pair for showcase)
